
calculate_everything = {
	# Calculate Population - First in Line because almoste everything else is based on it
	country_population = yes
	adult_population = yes
	pensioner_population = yes
	unemployed_population = yes
	workforce_population = yes
	rich_population = yes

	# Calculate Tax - combined_tax calls all these other functions:
	combined_tax = yes
		# income_tax = yes
		# consumption_tax = yes
		# wealth_tax = yes
		# trade_tax = yes

	# Calculate Expenses - total_expenses calls all these other functions:
	total_expenses = yes
		# healthcare_expenses = yes
		# pension_expenses = yes
		# saleries_expenses = yes
		# social_welfare_expenses = yes
		# building_expenses = yes # ToDo
		# trading_resources_expenses = yes

	# Calculate Inflation - inflation_rate calls all these other functions:
	inflation_rate = yes
		# economic_inflation = yes
		# printing_inflation = yes

	# Money Priniting
	national_economy_money = yes
	money_printing_amount = yes
	relative_printing_rate = yes

	# Balance - Needed for loan_income_ratio
	monthly_income = yes

	# Loans - Needed for Monthly Expenses
	loan_income_ratio = yes
	interest_rate = yes
	interest_amount = yes
	loan_cap = yes
	monthly_repay_amount = yes
		# monthly_repay_penalty = yes

	# Balance
	monthly_expenses = yes
	monthly_balance_init = yes

	# War Exhaustion
	adjusted_casualties = yes
	casualtie_ratio = yes
	weighted_casualties = yes
	war_exhaustion = yes
	war_duration = yes

	# Happines
	happines = yes
		# war_happines_effect = yes
		# income_tax_happines_effect = yes
		# constumtion_tax_happines_effect = yes
		# inflation_rate_hapines_effect = yes
		# inflation_happines_effect = yes
		# expenses_happines_effect = yes
			# healthcare_happines_effect = yes
			# soldiers_healthcare_happines_effect = yes
			# pension_happines_effect = yes
			# saleries_happines_effect = yes
			# social_welfare_happines_effect = yes
}





SAMPLE_add_random_point_to_line = {
	# Adds a random point to the line graph

	# This count is displayed as an x-axis label, increment it
	add_to_variable = { SAMPLE_count = 1 }

	# We keep track of the last y position so we can calculate the slope
	set_variable = { SAMPLE_last_y_position = SAMPLE_y_position }
	
	# Random new y position, 10-90
	set_variable = { SAMPLE_y_position = random }
	multiply_variable = { SAMPLE_y_position = 80 }
	add_to_variable = { SAMPLE_y_position = 10 }
	round_variable = SAMPLE_y_position

	# Prune arrays so they hold at most 20 elements
	if = {
		limit = {
			check_variable = { SAMPLE_count > 20 }
		}
		remove_from_array = { array = SAMPLE_graph_offsets index = 0 }
		remove_from_array = { array = SAMPLE_graph_slopes index = 0 }
		remove_from_array = { array = SAMPLE_numbers index = 0 }
	}

	# The y position offset is the inverse of the y position
	set_temp_variable = { offset = SAMPLE_last_y_position }
	multiply_temp_variable = { offset = -1 }
	add_to_array = { SAMPLE_graph_offsets = offset }

	# The 'slope' here is simply the difference between the current y value and the last one, divided by 2 plus 50
	# These last two changes are needed for the shader
	set_temp_variable = { diff = SAMPLE_y_position }
	subtract_from_temp_variable = { diff = SAMPLE_last_y_position }
	divide_temp_variable = { diff = 2 }
	add_to_temp_variable = { diff = 50 }
	add_to_array = { SAMPLE_graph_slopes = diff }
	
	add_to_array = { SAMPLE_numbers = SAMPLE_count }
}